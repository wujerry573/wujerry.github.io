{"version":3,"sources":["components/header.js","components/about-me.js","components/projects.js","components/footer.js","components/main-container.js","serviceWorker.js","index.js","App.js"],"names":["Header","class","AboutMe","Projects","type","Footer","MainContainer","basename","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAgBeA,EAdA,kBACb,yBAAKC,MAAM,SACT,uBAAGA,MAAM,gCACP,uBAAGA,MAAM,gBAAT,aAEF,uBAAGA,MAAM,gCACP,uBAAGA,MAAM,gBAAT,aAEF,uBAAGA,MAAM,gCACP,uBAAGA,MAAM,gBAAT,aCMSC,EAfC,kBACd,yBAAKD,MAAM,SACT,yBAAKA,MAAM,cACT,yBAAKA,MAAM,cACT,wBAAIA,MAAM,oBACR,4DACA,uBAAGA,OAAK,GAAR,yICGKE,EATE,kBACf,yBAAKF,MAAM,WACT,wBAAIG,KAAK,KACP,2CACA,yDACA,sCCESC,EAPA,kBACb,4BAAQJ,MAAM,UACZ,yBAAKA,MAAM,6BACT,mDCqBSK,G,uLAhBX,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,YAAYC,UAAWP,U,GAXjBQ,cCIRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCHD,WACb,OAAO,kBAAC,EAAD,QDEO,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c7ac0c2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => (\n  <nav class=\"level\">\n    <p class=\"level-item has-text-centered\">\n      <a class=\"link is-info\">About Me</a>\n    </p>\n    <p class=\"level-item has-text-centered\">\n      <a class=\"link is-info\">Projects</a>\n    </p>\n    <p class=\"level-item has-text-centered\">\n      <a class=\"link is-info\">Resume</a>\n    </p>\n  </nav>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst AboutMe = () => (\n  <div class=\"level\">\n    <div class=\"level-left\">\n      <div class=\"level-item\">\n        <h1 class=\"content is-large\">\n          <strong>Hi, my name is Jerry Wu.</strong>\n          <p class>\n            I'm a web developer based in Providence, Rhode Island focusing on\n            building excellent and high-quality websites and applications.\n          </p>\n        </h1>\n      </div>\n    </div>\n  </div>\n);\nexport default AboutMe;\n","import React from \"react\";\n\nconst Projects = () => (\n  <div class=\"content\">\n    <ol type=\"1\">\n      <li>discord bot</li>\n      <li> twitch plays hearthstone</li>\n      <li>q&amp;a</li>\n    </ol>\n  </div>\n);\nexport default Projects;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer class=\"footer\">\n    <div class=\"content has-text-centered\">\n      <p>Built by Jerry Wu</p>\n    </div>\n  </footer>\n);\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport Header from \"./header\";\nimport AboutMe from \"./about-me\";\nimport Projects from \"./projects\";\nimport Footer from \"./footer\";\nimport \"bulma/css/bulma.css\";\n\nclass MainContainer extends Component {\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div>\n          <Header />\n          <AboutMe />\n          <Projects />\n          <Footer />\n          <Route exact path=\"/\" component={Header} />\n          <Route path=\"/about\" component={AboutMe} />\n          <Route path=\"/projects\" component={Projects} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default MainContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport MainContainer from \"./components/main-container\";\n\nexport default function App() {\n  return <MainContainer />;\n}\n"],"sourceRoot":""}